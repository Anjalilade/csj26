- Variable : It is name given to a memory location address.
- Uses of variable: It is used to store data inside the memory or access the existing data

# Data type :
- It specifies three things
    - type of data that variable will hold
    - size of the memory location. memory requirement
    - It specifies range of allowed values that can be stored inside the variable
* Types of data types available in java:
1. byte - size: 1 byte, range: -128 to 127
2. short - size: 2 bytes, range: -32768 to 32767
3. int - size 4 bytes
4. long  - size 8 bytes
5. float - 4 bytes
6. double - 8 bytes
7. char - 2 bytes
8. boolean - 1 byte

How to create a variable?
- dataType variableName = value;
 e.g. int age = 50; // age is a variable, int is a data type, 50 is the value

# Type casting for primitives:
Type casting can be done for primitive as well as non-primitives.

converting one data type value into another data type value.
* Explicit typecasting - When we try to assign a bigger data type value to a smaller data type value then we have to perform explicit type casting
    int intValue = 100;
    byte byteValue = intValue;// we get compile time error
    - We tell to the compiler we are fine with the data loss.

    byte byteValue = (byte) intValue; // explicit type casting
    - Developer is responsible for explicit type-casting

* Implicit Type-casting :
    - when we try to assign small data type value to bigger data type value
    - Java compiler is responsible to perform implicit typecasting
    - There won't be any data loss in case of implicit type-casting.
          short shortValue = 100;
          int a = shortValue; // implicit type casting is done by the java compiler


explicit type casting --> upcasting, narrowing
implicit type casting -->  downcasting, widing

Autoboxing : converting primitive value into non-primitive
Unboxing : converting non-primitive value into primitive

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Operators
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. Arithmetic operators : +, -, *, /, %
    - + operator will do mathematical addition when both the operands are of number type
2. String concatenation operator : +
    - it is the only operator which is overloaded in java.[does two jobs]
    - + will perform string concatenation when one of the operand is String type
    * expression evaluation will start from left to right


#input for arithmetic operator will be number type and output will also be of number type

--- Arithmetic operators are not applicable for boolean
byte, short, int , char (+,-,*, /, %) byte, short, int , char ---> int
byte, short, int , char, long (+,-,*, /, %) byte, short, int , char, long ---> long
byte, short, int , char, long, float (+,-,*, /, %) byte, short, int , char, long,float ---> float
byte, short, int , char, long, float,double (+,-,*, /, %) byte, short, int , char, long,float, double ---> double
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 3. Comparison Operators : > ,< , >= , <=, ==, !=
 - These are applicable for number type.
 - for boolean only == and != is applicable

 output of Comparison operators : boolean

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







